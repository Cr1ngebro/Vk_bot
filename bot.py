import os
import json
import random
import threading
from flask import Flask
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
GROUP_TOKEN = os.getenv("GROUP_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GROUP_ID = int(os.getenv("GROUP_ID"))
PAYMENT_DETAILS = os.getenv("PAYMENT_DETAILS")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=GROUP_TOKEN)
longpoll = VkBotLongPoll(vk_session, group_id=GROUP_ID)
vk = vk_session.get_api()

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route("/")
def index():
    return "‚úÖ Bot is running."

# –ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
PRODUCTS = {
    "vbucks": [
        "üíé 1000 –í-–±–∞–∫—Å–æ–≤ ‚Äî 649‚ÇΩ",
        "üíé 2800 –í-–±–∞–∫—Å–æ–≤ ‚Äî 1699‚ÇΩ",
        "üíé 5000 –í-–±–∞–∫—Å–æ–≤ ‚Äî 2699‚ÇΩ",
        "üíé 13500 –í-–±–∞–∫—Å–æ–≤ ‚Äî 5399‚ÇΩ"
    ],
    "packs": [
        "üéí –ù–∞–±–æ—Ä ¬´–°–∞–≥—É–∞—Ä–æ¬ª ‚Äî 399‚ÇΩ",
        "üéí –ù–∞–±–æ—Ä ¬´–†–µ–≤–æ–ª—é—Ü–∏—è –ì—Ä–∞—Ñ—Ñ–∏—Ç–∏¬ª ‚Äî 399‚ÇΩ",
        "üéí –ù–∞–±–æ—Ä ¬´–ß–∞—Å –†–∞—Å–ø–ª–∞—Ç—ã¬ª ‚Äî 1299‚ÇΩ",
        "üéí –ù–∞–±–æ—Ä ¬´–ù–∏–Ω–¥–∑—è –°–∞—Ä–∞¬ª ‚Äî 1299‚ÇΩ",
        "üéí –ù–∞–±–æ—Ä ¬´–õ–µ–≥–µ–Ω–¥—ã –ê–Ω–∏–º—ç¬ª ‚Äî 1499‚ÇΩ"
    ],
    "teams": [
        "üõ° –û—Ç—Ä—è–¥ ¬´Epic –¢—É—Ä—Ü–∏—è¬ª ‚Äî 499‚ÇΩ",
        "üõ° –û—Ç—Ä—è–¥ ¬´Xbox¬ª ‚Äî 1499‚ÇΩ"
    ]
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(user_id, message, keyboard=None):
    vk.messages.send(
        user_id=user_id,
        message=message,
        keyboard=json.dumps(keyboard) if keyboard else None,
        random_id=random.randint(1, 2**31 - 1)
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_keyboard():
    return {
        "one_time": False,
        "buttons": [
            [
                {
                    "action": {
                        "type": "text",
                        "label": "üì• –†–µ–∫–≤–∏–∑–∏—Ç—ã",
                        "payload": json.dumps({"button": "payment_details"})
                    },
                    "color": "positive"
                },
                {
                    "action": {
                        "type": "text",
                        "label": "üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã",
                        "payload": json.dumps({"button": "show_prices"})
                    },
                    "color": "primary"
                }
            ],
            [
                {
                    "action": {
                        "type": "text",
                        "label": "üìÑ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                        "payload": json.dumps({"button": "terms"})
                    },
                    "color": "primary"
                },
                {
                    "action": {
                        "type": "text",
                        "label": "üÜò –ü–æ–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞",
                        "payload": json.dumps({"button": "call_admin"})
                    },
                    "color": "negative"
                }
            ]
        ]
    }

# –ü–æ–¥–º–µ–Ω—é —Ü–µ–Ω
def get_price_menu():
    return {
        "one_time": False,
        "buttons": [
            [
                {
                    "action": {
                        "type": "text",
                        "label": "üîπ –í-–±–∞–∫—Å—ã",
                        "payload": json.dumps({"button": "vbucks"})
                    },
                    "color": "primary"
                },
                {
                    "action": {
                        "type": "text",
                        "label": "üî∏ –ù–∞–±–æ—Ä—ã",
                        "payload": json.dumps({"button": "packs"})
                    },
                    "color": "primary"
                }
            ],
            [
                {
                    "action": {
                        "type": "text",
                        "label": "üîª –û—Ç—Ä—è–¥—ã",
                        "payload": json.dumps({"button": "teams"})
                    },
                    "color": "primary"
                },
                {
                    "action": {
                        "type": "text",
                        "label": "‚Ü© –ù–∞–∑–∞–¥",
                        "payload": json.dumps({"button": "back_to_main"})
                    },
                    "color": "secondary"
                }
            ]
        ]
    }

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
def bot_loop():
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW and event.from_user:
            message = event.object.message
            user_id = message['from_id']

            payload = message.get('payload')

            if not payload:
                text = message['text'].lower()
                if text in ['–Ω–∞—á–∞—Ç—å', 'start', '–ø—Ä–∏–≤–µ—Ç', '–∫—É', '–∑–¥–∞—Ä–æ–≤–∞', '–∑–¥–∞—Ä–æ–≤', '—Ö–∞–π']:
                    send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard=get_keyboard())
                continue

            try:
                data = json.loads(payload)
                button = data.get('button')
            except:
                button = None

            if button == 'payment_details':
                send_message(user_id, PAYMENT_DETAILS or "‚ö† –†–µ–∫–≤–∏–∑–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

            elif button == 'terms':
                send_message(user_id, "üìå –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n1. https://vk.com/wall-219520002_32382")

            elif button == 'call_admin':
                send_message(user_id, "‚úÖ –ê–¥–º–∏–Ω —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
                send_message(ADMIN_ID, f"üîî –í–∞—Å –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: https://vk.com/id{user_id}")

            elif button == 'show_prices':
                send_message(user_id, "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", keyboard=get_price_menu())

            elif button in ['vbucks', 'packs', 'teams']:
                items = PRODUCTS.get(button, [])
                text = "\n".join(items) if items else "üîç –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
                send_message(user_id, text, keyboard=get_price_menu())

            elif button == 'back_to_main':
                send_message(user_id, "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", keyboard=get_keyboard())

            else:
                send_message(user_id, "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", keyboard=get_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=bot_loop, daemon=True).start()

# Flask-—Å–µ—Ä–≤–µ—Ä
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
